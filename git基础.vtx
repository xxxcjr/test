# File Name: /home/xxxcjr/note_for_debian/git基础.vtx
# Created Time: 2011-10-19 星期三 19:17:59
# Last Modified: 2011-10-19 星期三 22:25:28 [Athena]
# vim:tw=78
-------------------------------------------------------

==目录==
1 Git是什么
2 安装Debina系统安装git
3 为git设置用户(初始化)
4 建立git版本库
5 向本地版本库提交文件

==正文==
1 Git是什么
git是一个分布式版本控制系统。

2 安装Debina系统安装git

3 为git设置用户(初始化)
# 用户名
$ git config --global user.name 'xxxcjr'
# email
$ git config --global user.email 'xxxcjr@gmail.com'
#文本编辑器，默认vim
$ git config --global core.editor vim
# 差异分析工具
$ git config --global merge.tool vimdiff
* 用户名和email为必须，其它的可供选择

4 git的基本操作

4.1 建立git版本库
# 首先进入到要建立版本库的文件夹
$ cd ~/work
# 用git init命令初始化版本库。
$ git init

4.2 向本地版本库提交文件
# 查看git版本库的状态（这一步不是必须的，但是个好习惯）
$ git status
通过命令可以看到处于git跟踪下的文件具有三种状态：
    modified 已修改过的文件
    staged 已通过git add命令添加到暂存区域的文件
    committed 已通过git commit命令提交过的文件
要更详尽地查看文件变化可使用git diff命令
# 查看未暂存文件的变化（与最近一次的暂存/提交比较）
$ git diff
# 查看已暂存文件的变化（与最近一次提交比较）
$ git diff --cached

# 将文件提交到暂存区
$ git add <file>
* 可以使用“git add .”对版本库进行整体提交。
# 提交更改（只有处于暂存区的文件会被提交），直接使用git commit命令调用提交说明窗口。
$ git commit

4.3 删除文件
可以在目录中手动删除，也可以使用git rm命令删除，后者相当于手动删除后使用add命令将更改添加到暂存区域
# 删除暂存区的某个文件
$ git reset HEAD <file>

4.4 文件重命名
git不会跟踪在文件目录中手动的文件重命名操作，如果手动重命名了某个文件，git会认为这是一次delete-create操作。但可以使用git mv命令完成重命名。
$ git mv oldfile newfile

4.5 撤销操作
如果想恢复某个文件，可使用chechout --<file>来恢复。
$ git chechout --README
它只有在修改文件还没有暂存的情况下，使用最近的提交版本进行恢复。如果文件已经暂存，则需要行使用git reset HEAD <file>从暂存区删除文件，再使用该命令。

4.6 查看提交历史
git log使用用于查看提交历史，它提供各种筛选和输出格式定制功能，非常强大。
$ git log
* 第一行commit后的40个字符串表示这次提交对应的SHA-1值，可用于指代项目的版本（通常只需要前6位就足够了）。
* 更详细的使用可通过命令“git help log”查看。

4.7 回退版本
如果想撤销某（几）次提交，回退到某个版本，可使用git reset [--mode] <commit>命令。
$ git reset [--(mixed|soft|hard)] cec8506
* cec8506是项目版本号，可以通过git log命令查看
* --mixed 默认模式，回退到某次提交后的暂存状态，即重置索引内容，将其定位到指定的项目版本，而不改变工作树中的所有内容，只是提示你有哪些文件还未更新。
* --soft 回退到某次提交后的暂存状态，不触动索引的位置，也不改变工作树中的任何内容。* --hard 回退到某次提交完整状态，舍弃提交后的所有修改（慎用）。

5 克隆git版本库
# 通过git clone命令把由.git文件夹克隆出git版本库(git-copy)
$ git clone .git git-copy

6 远程版本库的使用
# 查看远程库的详细信息
$ git remote -v
# 为远程库建立别名，方便使用。以后pro-git就要指代progit的远程库。
$ git remote add pro-git https://github.com/progit/progit.git
# 提交到远程库
$ git push pro-git master
# 删除远程仓库
$ git remote -d <remote-name>
重命名远程仓库
$ git remote rename oldname newname






